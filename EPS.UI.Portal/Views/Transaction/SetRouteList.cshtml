@{
    ViewBag.Title = "SetRouteList";
}

<link rel="stylesheet" type="text/css" href="~/js_api_3.9/dojo/dijit/themes/claro/claro.css" />
<link rel="stylesheet" type="text/css" href="~/js_api_3.9/esri/css/esri.css" />
@*<script>
    dojoConfig = {
        baseUrl: "js_api_3.9/dojo/dojo",
    }
</script>*@
<script type="text/javascript" src="~/js_api_3.9/init.js"></script>
<style>


    #sum div {
        float: left;
    }

    #map {
        padding: 1px;
        border: solid 2px #444;
        -moz-border-radius: 4px;
        border-radius: 4px;
        width: 1125px;
        height: 550px;
    }

    #rightPane {
        border: none;
        padding: 0;
        width: 180px;
    }

    .templatePicker {
        border: solid 2px #444;
    }
</style>
<section class="content-header">
    <h1>
        巡检计划
    </h1>
    <ol class="breadcrumb">
        <li><a href="/Home/Index"><i class="fa fa-dashboard"></i>首页</a></li>
        <li>电力巡检业务</li>
        <li class="active">巡检线路设置</li>
    </ol>
    <hr style="margin:15px 0px 0px 0px;height:1px;border:0px;background-color:#D5D5D5;color:#D5D5D5;" />
</section>


<section class="claro">

    <div id="sum" style="width:100%;height:100%;">
        <div id="map" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'center'"></div>
        <div id="rightPane" data-dojo-type="dijit/layout/ContentPane" data-dojo-props="region:'right'">
            <div id="templatePickerDiv"></div>
        </div>
    </div>
</section>

<script>
    var map;
    require([
        "esri/map",
        "esri/toolbars/draw",
        "esri/toolbars/edit",
        "esri/graphic",
        "esri/config",

        "esri/layers/FeatureLayer",
        "esri/layers/ArcGISDynamicMapServiceLayer",
        "esri/symbols/SimpleMarkerSymbol",
        "esri/symbols/SimpleLineSymbol",
        "esri/symbols/SimpleFillSymbol",

        "esri/dijit/editing/TemplatePicker",

        "dojo/_base/array",
        "dojo/_base/event",
        "dojo/_base/lang",
        "dojo/parser",
        "dijit/registry",

        "dijit/layout/BorderContainer", "dijit/layout/ContentPane",
        "dijit/form/Button", "dojo/domReady!"
    ], function (
        Map, Draw, Edit, Graphic, esriConfig,
        FeatureLayer, ArcGISDynamicMapServiceLayer,
        SimpleMarkerSymbol, SimpleLineSymbol, SimpleFillSymbol,
        TemplatePicker,
        arrayUtils, event, lang, parser, registry
    ) {
            parser.parse();


            // This service is for development and testing purposes only. We recommend that you create your own geometry service for use within your applications.
            esriConfig.defaults.geometryService = new esri.tasks.GeometryService("http://localhost:6080/arcgis/rest/services/Utilities/Geometry/GeometryServer");

            map = new Map("map");
            //note that if you do not have public Internet access then you will need to point this url to your own locally accessible cached service.
            var lyNynamic = new ArcGISDynamicMapServiceLayer("http://localhost:6080/arcgis/rest/services/Emap/MapServer");
            map.addLayer(lyNynamic);

            map.on("layers-add-result", initEditing);

            var landusePointLayer = new FeatureLayer("http://localhost:6080/arcgis/rest/services/edit/FeatureServer/0", {
                mode: FeatureLayer.MODE_SNAPSHOT,
                outFields: ["*"]
            });
            var landuseLineLayer = new FeatureLayer("http://localhost:6080/arcgis/rest/services/edit/FeatureServer/1", {
                mode: FeatureLayer.MODE_SNAPSHOT,
                outFields: ["*"]
            });


            map.addLayers([landusePointLayer, landuseLineLayer]);

            function initEditing(evt) {
                console.log("initEditing", evt);
                // var map = this;
                var currentLayer = null;
                var layers = arrayUtils.map(evt.layers, function (result) {
                    return result.layer;
                });
                console.log("layers", layers);

                var editToolbar = new Edit(map);
                editToolbar.on("deactivate", function (evt) {
                    currentLayer.applyEdits(null, [evt.graphic], null);
                });

                arrayUtils.forEach(layers, function (layer) {
                    var editingEnabled = false;
                    layer.on("dbl-click", function (evt) {
                        event.stop(evt);
                        if (editingEnabled === false) {
                            editingEnabled = true;
                            editToolbar.activate(Edit.EDIT_VERTICES, evt.graphic);
                        } else {
                            currentLayer = this;
                            editToolbar.deactivate();
                            editingEnabled = false;
                        }
                    });

                    layer.on("click", function (evt) {
                        event.stop(evt);
                        if (evt.ctrlKey === true || evt.metaKey === true) {  //delete feature if ctrl key is depressed
                            layer.applyEdits(null, null, [evt.graphic]);
                            currentLayer = this;
                            editToolbar.deactivate();
                            editingEnabled = false;
                        }
                    });
                });

                var templatePicker = new TemplatePicker({
                    featureLayers: layers,
                    rows: "auto",
                    columns: 2,
                    grouping: true,
                    style: "height: auto; overflow: auto;"
                }, "templatePickerDiv");

                templatePicker.startup();

                var drawToolbar = new Draw(map);

                var selectedTemplate;
                templatePicker.on("selection-change", function () {
                    if (templatePicker.getSelected()) {
                        selectedTemplate = templatePicker.getSelected();
                    }
                    switch (selectedTemplate.featureLayer.geometryType) {
                        case "esriGeometryPoint":
                            drawToolbar.activate(Draw.POINT);
                            break;
                        case "esriGeometryPolyline":
                            drawToolbar.activate(Draw.POLYLINE);
                            break;
                        case "esriGeometryPolygon":
                            drawToolbar.activate(Draw.POLYGON);
                            break;
                    }
                });

                drawToolbar.on("draw-end", function (evt) {
                    drawToolbar.deactivate();
                    editToolbar.deactivate();
                    var newAttributes = lang.mixin({}, selectedTemplate.template.prototype.attributes);
                    var newGraphic = new Graphic(evt.geometry, null, newAttributes);
                    selectedTemplate.featureLayer.applyEdits([newGraphic], null, null);
                });
            }
        });
</script>